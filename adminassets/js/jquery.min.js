"use strict";

function _classCallCheck(t, r) { if (!(t instanceof r)) throw new TypeError("Cannot call a class as a function") }

function _defineProperties(t, r) {
    for (var e = 0; e < r.length; e++) {
        var n = r[e];
        n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n)
    }
}

function _createClass(t, r, e) { return r && _defineProperties(t.prototype, r), e && _defineProperties(t, e), t }

function _toConsumableArray(t) { return _arrayWithoutHoles(t) || _iterableToArray(t) || _unsupportedIterableToArray(t) || _nonIterableSpread() }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.") }

function _unsupportedIterableToArray(t, r) { if (t) { if ("string" == typeof t) return _arrayLikeToArray(t, r); var e = Object.prototype.toString.call(t).slice(8, -1); return "Object" === e && t.constructor && (e = t.constructor.name), "Map" === e || "Set" === e ? Array.from(t) : "Arguments" === e || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e) ? _arrayLikeToArray(t, r) : void 0 } }

function _iterableToArray(t) { if ("undefined" != typeof Symbol && Symbol.iterator in Object(t)) return Array.from(t) }

function _arrayWithoutHoles(t) { if (Array.isArray(t)) return _arrayLikeToArray(t) }

function _arrayLikeToArray(t, r) {
    (null == r || r > t.length) && (r = t.length);
    for (var e = 0, n = new Array(r); e < r; e++) n[e] = t[e];
    return n
}! function() {
    function t() {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [],
            r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1,
            e = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
            n = arguments.length > 3 ? arguments[3] : void 0,
            a = (t = function(t, r) {
                if (t = _toConsumableArray(t), Array.isArray(t[0]) || (t = t.map(function(t) { return [t.x, t.y] })), r) {
                    var e = t[t.length - 1],
                        n = t[t.length - 2],
                        a = t[0],
                        i = t[1];
                    t.unshift(e), t.unshift(n), t.push(a), t.push(i)
                }
                return t.flat()
            }(t, e)).length,
            i = a - 4,
            o = e ? t[2] : t[0],
            u = e ? t[3] : t[1],
            s = "M" + [o, u];
        n && n("MOVE", [o, u]);
        for (var l = e ? a - 4 : a - 2, y = e ? 2 : 0; y < l; y += 2) {
            var c = y ? t[y - 2] : t[0],
                h = y ? t[y - 1] : t[1],
                f = t[y + 0],
                v = t[y + 1],
                p = t[y + 2],
                m = t[y + 3],
                k = f + (p - c) / 6 * r,
                g = v + (m - h) / 6 * r,
                d = p - ((y !== i ? t[y + 4] : p) - f) / 6 * r,
                b = m - ((y !== i ? t[y + 5] : m) - v) / 6 * r;
            s += "C" + [k, g, d, b, p, m], n && n("CURVE", [k, g, d, b, p, m])
        }
        return s
    }
    var r = function() {
            function t() {
                var r = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,
                    e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
                _classCallCheck(this, t), this.x = r, this.y = e
            }
            return _createClass(t, [{ key: "set", value: function(t, r) { var e = this._formatArgs(t, r); return this.x = e.x, this.y = e.y, this } }, { key: "copy", value: function() { return new t(this.x, this.y) } }, { key: "toArray", value: function() { return [this.x, this.y] } }, { key: "toObject", value: function() { return { x: this.x, y: this.y } } }, { key: "add", value: function(t, r) { var e = this._formatArgs(t, r); return this.x += e.x, this.y += e.y, this } }, { key: "rem", value: function(t, r) { var e = this._formatArgs(t, r); return this.x = this.x % e.x, this.y = this.y % e.y, this } }, { key: "sub", value: function(t, r) { var e = this._formatArgs(t, r); return this.x -= e.x, this.y -= e.y, this } }, { key: "mult", value: function(t, r) { var e = this._formatArgs(t, r); return this.x *= e.x, this.y *= e.y, this } }, { key: "div", value: function(t, r) { var e = this._formatArgs(t, r); return this.x /= e.x, this.y /= e.y, this } }, { key: "mag", value: function() { return Math.sqrt(this.magSq()) } }, {
                key: "magSq",
                value: function() {
                    var t = this.x,
                        r = this.y;
                    return t * t + r * r
                }
            }, { key: "dot", value: function(t, r) { var e = this._formatArgs(t, r); return this.x * e.x + this.y * e.y } }, { key: "dist", value: function(t) { return t.copy().sub(this).mag() } }, { key: "normalize", value: function() { var t = this.mag(); return 0 !== t && this.mult(1 / t), this } }, { key: "limit", value: function(t) { var r = this.magSq(); return r > t * t && this.div(Math.sqrt(r)).mult(t), this } }, { key: "setMag", value: function(t) { return this.normalize().mult(t) } }, { key: "heading", value: function() { return Math.atan2(this.y, this.x) } }, {
                key: "rotate",
                value: function(t) {
                    var r = this.heading() + t,
                        e = this.mag();
                    return this.x = Math.cos(r) * e, this.y = Math.sin(r) * e, this
                }
            }, { key: "lerp", value: function(t, r, e) { return this.x += (t - this.x) * e, this.y += (r - this.y) * e, this } }, {
                key: "_formatArgs",
                value: function(t, r) {
                    switch (t.constructor.name) {
                        case "Vector2D":
                            return { x: t.x, y: t.y };
                        default:
                            return r || (r = t), { x: t, y: r }
                    }
                }
            }], [{ key: "add", value: function(t, r) { return t.copy().add(r.copy()) } }, { key: "rem", value: function(t, r) { return t.copy().rem(r.copy()) } }, { key: "sub", value: function(t, r) { return t.copy().sub(r.copy()) } }, { key: "mult", value: function(t, r) { return t.copy().mult(r.copy()) } }, { key: "div", value: function(t, r) { return t.copy().div(r.copy()) } }, { key: "dot", value: function(t, r) { return t.copy().dot(r.copy()) } }, { key: "dist", value: function(t, r) { return t.copy().dist(r.copy()) } }, { key: "lerp", value: function(t, r, e) { return t.copy().lerp(r.copy().x, r.copy().y, e) } }, { key: "rotate", value: function(t, r) { return t.copy().rotate(r) } }]), t
        }(),
        e = _toConsumableArray(Array(8)).map(function(t, r) { return "--fleck-color-".concat(r + 1) });
    registerPaint("fleck", function() {
        function n() { _classCallCheck(this, n) }
        return _createClass(n, [{ key: "getDefinedColors", value: function(t) { return e.map(function(r) { return t.get(r).toString().trim() }).filter(function(t) { return t }) } }, {
            key: "parseProp",
            value: function(t) {
                var r = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
                    e = t.toString().trim();
                return r ? parseFloat(e) : e
            }
        }, {
            key: "paint",
            value: function(e, n, a) {
                for (var i, o = this.parseProp(a.get("--fleck-seed")), u = this.parseProp(a.get("--fleck-count")), s = this.parseProp(a.get("--fleck-size-base"), !0), l = this.getDefinedColors(a), y = n.width, c = n.height, h = (i = o, function(t, r) { i = 1831565813 + (i |= 0) | 0; var e = Math.imul(i ^ i >>> 15, 1 | i); return (((e = e + Math.imul(e ^ e >>> 7, 61 | e) ^ e) ^ e >>> 14) >>> 0) / 4294967296 * (r - t) + t }), f = 0; f < u; f++) {
                    var v = ~~h(6, 8),
                        p = [],
                        m = 2 * Math.PI / v,
                        k = new r(h(0, y), h(0, c)),
                        g = s;
                    h(0, 1) > .125 && (g /= 2), h(0, 1) > .925 && (g *= 4), g = Math.max(1, Math.min(g, 24));
                    for (var d = 1; d <= v; d++) {
                        var b = d * m,
                            _ = new r(k.x + Math.cos(b) * g, k.y + Math.sin(b) * g);
                        p.push(r.lerp(_, k, h(0, .625)))
                    }
                    var A = l[~~h(0, l.length)];
                    e.fillStyle = A, e.beginPath(), t(p, 1, !0, function(t, r) { "MOVE" === t ? e.moveTo.apply(e, _toConsumableArray(r)) : e.bezierCurveTo.apply(e, _toConsumableArray(r)) }), e.fill()
                }
            }
        }], [{ key: "inputProperties", get: function() { return ["--fleck-seed", "--fleck-count", "--fleck-size-base"].concat(_toConsumableArray(e)) } }]), n
    }())
}();